
leak_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  0000063e  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800152  00800152  00000724  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5c  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e5  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000022b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064c  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_1>
   8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 35       	cpi	r26, 0x5B	; 91
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  9e:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PIN_Init>:
}

unsigned char UART_Receive(void){
	while (!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	83 7f       	andi	r24, 0xF3	; 243
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	83 7e       	andi	r24, 0xE3	; 227
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	08 95       	ret

000000c0 <UART_Init>:
  c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c8:	e1 ec       	ldi	r30, 0xC1	; 193
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 83       	st	Z, r24
  d0:	8e e0       	ldi	r24, 0x0E	; 14
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <UART_Transmit>:
  de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e2:	95 ff       	sbrs	r25, 5
  e4:	fc cf       	rjmp	.-8      	; 0xde <UART_Transmit>
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ea:	08 95       	ret

000000ec <send_message>:

void send_message(char *message){
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	7c 01       	movw	r14, r24
	int length = strlen(message);
  fa:	fc 01       	movw	r30, r24
  fc:	01 90       	ld	r0, Z+
  fe:	00 20       	and	r0, r0
 100:	e9 f7       	brne	.-6      	; 0xfc <send_message+0x10>
 102:	31 97       	sbiw	r30, 0x01	; 1
 104:	8f 01       	movw	r16, r30
 106:	08 1b       	sub	r16, r24
 108:	19 0b       	sbc	r17, r25
	for (int i = 0; i < length; i++) {
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	07 c0       	rjmp	.+14     	; 0x11e <send_message+0x32>
		UART_Transmit(message[i]);
 110:	f7 01       	movw	r30, r14
 112:	ec 0f       	add	r30, r28
 114:	fd 1f       	adc	r31, r29
 116:	80 81       	ld	r24, Z
 118:	0e 94 6f 00 	call	0xde	; 0xde <UART_Transmit>
	return UDR0;
}

void send_message(char *message){
	int length = strlen(message);
	for (int i = 0; i < length; i++) {
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	c0 17       	cp	r28, r16
 120:	d1 07       	cpc	r29, r17
 122:	b4 f3       	brlt	.-20     	; 0x110 <send_message+0x24>
		UART_Transmit(message[i]);
	};
	UART_Transmit('\n');
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	0e 94 6f 00 	call	0xde	; 0xde <UART_Transmit>
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	08 95       	ret

00000138 <BT_ON>:

void BT_ON(void){
	PORTD |= ((1<<PD5) | (1<<PD4));
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	80 63       	ori	r24, 0x30	; 48
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	08 95       	ret

00000140 <BT_OFF>:
	
}

void BT_OFF(void){
	PORTD &= ~((1<<PD5) | (1<<PD4));
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7c       	andi	r24, 0xCF	; 207
 144:	8b b9       	out	0x0b, r24	; 11
 146:	08 95       	ret

00000148 <get_state>:
}

int get_state(int bit){
	int state = -1;
	if (~PIND & (1<<bit)) {
 148:	29 b1       	in	r18, 0x09	; 9
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	20 95       	com	r18
 14e:	30 95       	com	r19
 150:	02 c0       	rjmp	.+4      	; 0x156 <get_state+0xe>
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <get_state+0xa>
 15a:	20 ff       	sbrs	r18, 0
 15c:	03 c0       	rjmp	.+6      	; 0x164 <get_state+0x1c>
		state = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
	}
	else {
		state = 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
	}
	return state;
}
 168:	08 95       	ret

0000016a <__vector_18>:

ISR(USART_RX_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
	stop_key = UDR0;
 176:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <stop_key>
}
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_1>:

ISR(INT0_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	SMCR &= ~(1<<SE);
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	8e 7f       	andi	r24, 0xFE	; 254
 1b0:	83 bf       	out	0x33, r24	; 51
	WDTCSR &= ~((1<<WDE) | (1<<WDIE));
 1b2:	e0 e6       	ldi	r30, 0x60	; 96
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	87 7b       	andi	r24, 0xB7	; 183
 1ba:	80 83       	st	Z, r24
	EIMSK &= ~(1<<INT0);
 1bc:	8d b3       	in	r24, 0x1d	; 29
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(1<<INT1);
 1c2:	8d b3       	in	r24, 0x1d	; 29
 1c4:	8d 7f       	andi	r24, 0xFD	; 253
 1c6:	8d bb       	out	0x1d, r24	; 29
	send = 1;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 1d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	stop_key = '0';
 1d4:	80 e3       	ldi	r24, 0x30	; 48
 1d6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <stop_key>
	counter = WAIT;
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	9e e3       	ldi	r25, 0x3E	; 62
 1de:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 1e2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
	BT_ON();
 1e6:	0e 94 9c 00 	call	0x138	; 0x138 <BT_ON>
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_2>:

ISR(INT1_vect){
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	SMCR &= ~(1<<SE);
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	83 bf       	out	0x33, r24	; 51
	WDTCSR &= ~((1<<WDE) | (1<<WDIE));
 234:	e0 e6       	ldi	r30, 0x60	; 96
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	87 7b       	andi	r24, 0xB7	; 183
 23c:	80 83       	st	Z, r24
	EIMSK &= ~(1<<INT0);
 23e:	8d b3       	in	r24, 0x1d	; 29
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	8d bb       	out	0x1d, r24	; 29
	EIMSK &= ~(1<<INT1);
 244:	8d b3       	in	r24, 0x1d	; 29
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	8d bb       	out	0x1d, r24	; 29
	send = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 252:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	stop_key = '0';
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <stop_key>
	counter = WAIT;
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	9e e3       	ldi	r25, 0x3E	; 62
 260:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 264:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
	BT_ON();
 268:	0e 94 9c 00 	call	0x138	; 0x138 <BT_ON>
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_6>:

ISR(WDT_vect){
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	if ((PIND & (1<<PD2) && leak == 1) || (~PIND & (1<<PD2) && leak == 0) || (PIND & (1<<PD3) && lb == 1) || (~PIND & (1<<PD3) && lb == 0)) {
 2b0:	4a 9b       	sbis	0x09, 2	; 9
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <__vector_6+0x32>
 2b4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <leak>
 2b8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <leak+0x1>
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	c1 f0       	breq	.+48     	; 0x2f0 <__vector_6+0x62>
 2c0:	4a 99       	sbic	0x09, 2	; 9
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <__vector_6+0x42>
 2c4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <leak>
 2c8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <leak+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	81 f0       	breq	.+32     	; 0x2f0 <__vector_6+0x62>
 2d0:	4b 9b       	sbis	0x09, 3	; 9
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <__vector_6+0x52>
 2d4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <lb>
 2d8:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lb+0x1>
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	41 f0       	breq	.+16     	; 0x2f0 <__vector_6+0x62>
 2e0:	4b 99       	sbic	0x09, 3	; 9
 2e2:	25 c0       	rjmp	.+74     	; 0x32e <__vector_6+0xa0>
 2e4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <lb>
 2e8:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lb+0x1>
 2ec:	89 2b       	or	r24, r25
 2ee:	f9 f4       	brne	.+62     	; 0x32e <__vector_6+0xa0>
		SMCR &= ~(1<<SE);
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	83 bf       	out	0x33, r24	; 51
		WDTCSR &= ~((1<<WDE) | (1<<WDIE));
 2f6:	e0 e6       	ldi	r30, 0x60	; 96
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	87 7b       	andi	r24, 0xB7	; 183
 2fe:	80 83       	st	Z, r24
		EIMSK &= ~(1<<INT1);
 300:	8d b3       	in	r24, 0x1d	; 29
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	8d bb       	out	0x1d, r24	; 29
		EIMSK &= ~(1<<INT0);
 306:	8d b3       	in	r24, 0x1d	; 29
 308:	8e 7f       	andi	r24, 0xFE	; 254
 30a:	8d bb       	out	0x1d, r24	; 29
		send = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 314:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
		stop_key = '0';
 318:	80 e3       	ldi	r24, 0x30	; 48
 31a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <stop_key>
		counter = WAIT;
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	9e e3       	ldi	r25, 0x3E	; 62
 322:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 326:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
		BT_ON();
 32a:	0e 94 9c 00 	call	0x138	; 0x138 <BT_ON>
	}
	if (~PIND & (1<<PD2) && PIND & (1<<PD3)){
 32e:	4a 99       	sbic	0x09, 2	; 9
 330:	18 c0       	rjmp	.+48     	; 0x362 <__vector_6+0xd4>
 332:	4b 99       	sbic	0x09, 3	; 9
 334:	11 c0       	rjmp	.+34     	; 0x358 <__vector_6+0xca>
 336:	15 c0       	rjmp	.+42     	; 0x362 <__vector_6+0xd4>
		for (int i=0; i<4; i++){
			PORTD ^= 1<<PD5;
 338:	9b b1       	in	r25, 0x0b	; 11
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	89 27       	eor	r24, r25
 33e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	4f ef       	ldi	r20, 0xFF	; 255
 342:	83 ec       	ldi	r24, 0xC3	; 195
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	41 50       	subi	r20, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <__vector_6+0xb8>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <__vector_6+0xc2>
 350:	00 00       	nop
		stop_key = '0';
		counter = WAIT;
		BT_ON();
	}
	if (~PIND & (1<<PD2) && PIND & (1<<PD3)){
		for (int i=0; i<4; i++){
 352:	2f 5f       	subi	r18, 0xFF	; 255
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	02 c0       	rjmp	.+4      	; 0x35c <__vector_6+0xce>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	24 30       	cpi	r18, 0x04	; 4
 35e:	31 05       	cpc	r19, r1
 360:	5c f3       	brlt	.-42     	; 0x338 <__vector_6+0xaa>
			PORTD ^= 1<<PD5;
			_delay_ms(200);
		}
	}
	if (PIND & (1<<PD2) && ~PIND & (1<<PD3)){
 362:	4a 9b       	sbis	0x09, 2	; 9
 364:	18 c0       	rjmp	.+48     	; 0x396 <__vector_6+0x108>
 366:	4b 9b       	sbis	0x09, 3	; 9
 368:	11 c0       	rjmp	.+34     	; 0x38c <__vector_6+0xfe>
 36a:	15 c0       	rjmp	.+42     	; 0x396 <__vector_6+0x108>
		for (int i=0; i<8; i++){
			PORTD ^= 1<<PD5;
 36c:	9b b1       	in	r25, 0x0b	; 11
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	89 27       	eor	r24, r25
 372:	8b b9       	out	0x0b, r24	; 11
 374:	4f ef       	ldi	r20, 0xFF	; 255
 376:	83 ec       	ldi	r24, 0xC3	; 195
 378:	99 e0       	ldi	r25, 0x09	; 9
 37a:	41 50       	subi	r20, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <__vector_6+0xec>
 382:	00 c0       	rjmp	.+0      	; 0x384 <__vector_6+0xf6>
 384:	00 00       	nop
			PORTD ^= 1<<PD5;
			_delay_ms(200);
		}
	}
	if (PIND & (1<<PD2) && ~PIND & (1<<PD3)){
		for (int i=0; i<8; i++){
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	02 c0       	rjmp	.+4      	; 0x390 <__vector_6+0x102>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	28 30       	cpi	r18, 0x08	; 8
 392:	31 05       	cpc	r19, r1
 394:	5c f3       	brlt	.-42     	; 0x36c <__vector_6+0xde>
			PORTD ^= 1<<PD5;
			_delay_ms(200);
		}
	}
	if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)){
 396:	4a 99       	sbic	0x09, 2	; 9
 398:	18 c0       	rjmp	.+48     	; 0x3ca <__vector_6+0x13c>
 39a:	4b 9b       	sbis	0x09, 3	; 9
 39c:	11 c0       	rjmp	.+34     	; 0x3c0 <__vector_6+0x132>
 39e:	15 c0       	rjmp	.+42     	; 0x3ca <__vector_6+0x13c>
		for (int i=0; i<16; i++){
			PORTD ^= 1<<PD5;
 3a0:	9b b1       	in	r25, 0x0b	; 11
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	89 27       	eor	r24, r25
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	4f ef       	ldi	r20, 0xFF	; 255
 3aa:	83 ec       	ldi	r24, 0xC3	; 195
 3ac:	99 e0       	ldi	r25, 0x09	; 9
 3ae:	41 50       	subi	r20, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <__vector_6+0x120>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <__vector_6+0x12a>
 3b8:	00 00       	nop
			PORTD ^= 1<<PD5;
			_delay_ms(200);
		}
	}
	if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)){
		for (int i=0; i<16; i++){
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	3f 4f       	sbci	r19, 0xFF	; 255
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__vector_6+0x136>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	20 31       	cpi	r18, 0x10	; 16
 3c6:	31 05       	cpc	r19, r1
 3c8:	5c f3       	brlt	.-42     	; 0x3a0 <__vector_6+0x112>
			PORTD ^= 1<<PD5;
			_delay_ms(200);
		}
	}
	asm("wdr");
 3ca:	a8 95       	wdr
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <main>:

int main(void)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	28 97       	sbiw	r28, 0x08	; 8
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
	PIN_Init();
 402:	0e 94 53 00 	call	0xa6	; 0xa6 <PIN_Init>
	UART_Init(BAUDRATE);
 406:	8f ec       	ldi	r24, 0xCF	; 207
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 60 00 	call	0xc0	; 0xc0 <UART_Init>
	sei();
 40e:	78 94       	sei
	char* response[4] = {"No leak! & GB", "Leak is detected! & GB", "No leak! & LB", "Leak is detected! & LB"};
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	e0 e0       	ldi	r30, 0x00	; 0
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	de 01       	movw	r26, r28
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	49 e6       	ldi	r20, 0x69	; 105
 426:	88 e1       	ldi	r24, 0x18	; 24
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	40 40       	sbci	r20, 0x00	; 0
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 432:	00 00       	nop
	_delay_ms(500);
	PORTD |= 1<<PD4;
 434:	8b b1       	in	r24, 0x0b	; 11
 436:	80 61       	ori	r24, 0x10	; 16
 438:	8b b9       	out	0x0b, r24	; 11
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	23 ed       	ldi	r18, 0xD3	; 211
 43e:	40 e3       	ldi	r20, 0x30	; 48
 440:	91 50       	subi	r25, 0x01	; 1
 442:	20 40       	sbci	r18, 0x00	; 0
 444:	40 40       	sbci	r20, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
	_delay_ms(1000);
	stop_key = '0';
 44c:	80 e3       	ldi	r24, 0x30	; 48
 44e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <stop_key>
	counter = WAIT;
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	9e e3       	ldi	r25, 0x3E	; 62
 456:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 45a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
	send = 1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 466:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	int counter2 = WAIT2;
 46a:	08 e1       	ldi	r16, 0x18	; 24
 46c:	10 e0       	ldi	r17, 0x00	; 0
	while (1){
		if (send == 1) {
 46e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 472:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	dd c0       	rjmp	.+442    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
			leak = get_state(2);
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 a4 00 	call	0x148	; 0x148 <get_state>
 484:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <leak+0x1>
 488:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <leak>
			lb = get_state(3);						
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 a4 00 	call	0x148	; 0x148 <get_state>
 494:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <lb+0x1>
 498:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <lb>
			if (stop_key != '1' && counter == WAIT && counter2 == WAIT2) {
 49c:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <stop_key>
 4a0:	21 33       	cpi	r18, 0x31	; 49
 4a2:	09 f4       	brne	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a4:	47 c0       	rjmp	.+142    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4a6:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <counter>
 4aa:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <counter+0x1>
 4ae:	20 38       	cpi	r18, 0x80	; 128
 4b0:	3e 43       	sbci	r19, 0x3E	; 62
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b4:	3f c0       	rjmp	.+126    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4b6:	08 31       	cpi	r16, 0x18	; 24
 4b8:	11 05       	cpc	r17, r1
 4ba:	e1 f5       	brne	.+120    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				if (leak == 0 && lb == 0) {
 4bc:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <leak>
 4c0:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <leak+0x1>
 4c4:	23 2b       	or	r18, r19
 4c6:	31 f4       	brne	.+12     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4c8:	89 2b       	or	r24, r25
 4ca:	21 f4       	brne	.+8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
					send_message(response[0]);
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	9a 81       	ldd	r25, Y+2	; 0x02
 4d0:	0e 94 76 00 	call	0xec	; 0xec <send_message>
				}
				if (leak == 1 && lb == 0) {
 4d4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <leak>
 4d8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <leak+0x1>
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	51 f4       	brne	.+20     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4e0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <lb>
 4e4:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lb+0x1>
 4e8:	89 2b       	or	r24, r25
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
					send_message(response[1]);
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	9c 81       	ldd	r25, Y+4	; 0x04
 4f0:	0e 94 76 00 	call	0xec	; 0xec <send_message>
				}
				if (leak == 0 && lb == 1) {
 4f4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <leak>
 4f8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <leak+0x1>
 4fc:	89 2b       	or	r24, r25
 4fe:	51 f4       	brne	.+20     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 500:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <lb>
 504:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lb+0x1>
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	21 f4       	brne	.+8      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
					send_message(response[2]);
 50c:	8d 81       	ldd	r24, Y+5	; 0x05
 50e:	9e 81       	ldd	r25, Y+6	; 0x06
 510:	0e 94 76 00 	call	0xec	; 0xec <send_message>
				}
				if (leak == 1 && lb == 1) {
 514:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <leak>
 518:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <leak+0x1>
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	51 f4       	brne	.+20     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 520:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <lb>
 524:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <lb+0x1>
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	21 f4       	brne	.+8      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
					send_message(response[3]);
 52c:	8f 81       	ldd	r24, Y+7	; 0x07
 52e:	98 85       	ldd	r25, Y+8	; 0x08
 530:	0e 94 76 00 	call	0xec	; 0xec <send_message>
				}
			}
			if (counter <= 0) {
 534:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <counter>
 538:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <counter+0x1>
 53c:	18 16       	cp	r1, r24
 53e:	19 06       	cpc	r1, r25
 540:	64 f0       	brlt	.+24     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
				counter = WAIT;
 542:	80 e8       	ldi	r24, 0x80	; 128
 544:	9e e3       	ldi	r25, 0x3E	; 62
 546:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 54a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
				if (counter2 <= 0) {
 54e:	10 16       	cp	r1, r16
 550:	11 06       	cpc	r1, r17
 552:	4c f4       	brge	.+18     	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
					counter2 = WAIT2;
				}
				else {
					counter2--;
 554:	01 50       	subi	r16, 0x01	; 1
 556:	11 09       	sbc	r17, r1
 558:	08 c0       	rjmp	.+16     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
				}
			}
			else {
				counter--;
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <counter+0x1>
 560:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <counter>
 564:	02 c0       	rjmp	.+4      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
				}
			}
			if (counter <= 0) {
				counter = WAIT;
				if (counter2 <= 0) {
					counter2 = WAIT2;
 566:	08 e1       	ldi	r16, 0x18	; 24
 568:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else {
				counter--;
			}
			if (stop_key == '1') {
 56a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <stop_key>
 56e:	81 33       	cpi	r24, 0x31	; 49
 570:	09 f0       	breq	.+2      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 572:	61 c0       	rjmp	.+194    	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
				BT_OFF();
 574:	0e 94 a0 00 	call	0x140	; 0x140 <BT_OFF>
				send = 0;
 578:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
 57c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
				if (PIND & (1<<PD2) && PIND & (1<<PD3)){
 580:	4a 9b       	sbis	0x09, 2	; 9
 582:	16 c0       	rjmp	.+44     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 584:	4b 9b       	sbis	0x09, 3	; 9
 586:	14 c0       	rjmp	.+40     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
					EIMSK |= 1<<INT1;
 588:	8d b3       	in	r24, 0x1d	; 29
 58a:	82 60       	ori	r24, 0x02	; 2
 58c:	8d bb       	out	0x1d, r24	; 29
					EICRA &= ~((1<<ISC11) | (1<<ISC10));
 58e:	e9 e6       	ldi	r30, 0x69	; 105
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	83 7f       	andi	r24, 0xF3	; 243
 596:	80 83       	st	Z, r24
					EIMSK|= 1<<INT0;
 598:	8d b3       	in	r24, 0x1d	; 29
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	8d bb       	out	0x1d, r24	; 29
					EICRA &= ~((1<<ISC01) | (1<< ISC00));
 59e:	80 81       	ld	r24, Z
 5a0:	8c 7f       	andi	r24, 0xFC	; 252
 5a2:	80 83       	st	Z, r24
					SMCR |= 1<<SE;
 5a4:	83 b7       	in	r24, 0x33	; 51
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	83 bf       	out	0x33, r24	; 51
					SMCR |= 1<<SM1;
 5aa:	83 b7       	in	r24, 0x33	; 51
 5ac:	84 60       	ori	r24, 0x04	; 4
 5ae:	83 bf       	out	0x33, r24	; 51
				}
				if (~PIND & (1<<PD2) && PIND & (1<<PD3)) {
 5b0:	4a 99       	sbic	0x09, 2	; 9
 5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5b4:	4b 9b       	sbis	0x09, 3	; 9
 5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
					EIMSK |= 1<<INT1;
 5b8:	8d b3       	in	r24, 0x1d	; 29
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	8d bb       	out	0x1d, r24	; 29
					EICRA &= ~((1<<ISC11) | (1<<ISC10));
 5be:	e9 e6       	ldi	r30, 0x69	; 105
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	83 7f       	andi	r24, 0xF3	; 243
 5c6:	80 83       	st	Z, r24
					WDTCSR |= (1<<WDCE) | (1<<WDE);
 5c8:	e0 e6       	ldi	r30, 0x60	; 96
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	88 61       	ori	r24, 0x18	; 24
 5d0:	80 83       	st	Z, r24
					WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 5d2:	87 e4       	ldi	r24, 0x47	; 71
 5d4:	80 83       	st	Z, r24
					SMCR |= 1<<SE;
 5d6:	83 b7       	in	r24, 0x33	; 51
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	83 bf       	out	0x33, r24	; 51
					SMCR |= 1<<SM1;
 5dc:	83 b7       	in	r24, 0x33	; 51
 5de:	84 60       	ori	r24, 0x04	; 4
 5e0:	83 bf       	out	0x33, r24	; 51
				}
				if (PIND & (1<<PD2) && ~PIND & (1<<PD3)) {
 5e2:	4a 9b       	sbis	0x09, 2	; 9
 5e4:	17 c0       	rjmp	.+46     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 5e6:	4b 99       	sbic	0x09, 3	; 9
 5e8:	15 c0       	rjmp	.+42     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					EIMSK|= 1<<INT0;
 5ea:	8d b3       	in	r24, 0x1d	; 29
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	8d bb       	out	0x1d, r24	; 29
					EICRA &= ~((1<<ISC01) | (1<< ISC00));
 5f0:	e9 e6       	ldi	r30, 0x69	; 105
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8c 7f       	andi	r24, 0xFC	; 252
 5f8:	80 83       	st	Z, r24
					WDTCSR |= (1<<WDCE) | (1<<WDE);
 5fa:	e0 e6       	ldi	r30, 0x60	; 96
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	88 61       	ori	r24, 0x18	; 24
 602:	80 83       	st	Z, r24
					WDTCSR = (1<<WDIE) | (1<<WDP3);
 604:	80 e6       	ldi	r24, 0x60	; 96
 606:	80 83       	st	Z, r24
					SMCR |= 1<<SE;
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	83 bf       	out	0x33, r24	; 51
					SMCR |= 1<<SM1;
 60e:	83 b7       	in	r24, 0x33	; 51
 610:	84 60       	ori	r24, 0x04	; 4
 612:	83 bf       	out	0x33, r24	; 51
				}
				if (~PIND & (1<<PD2) && ~PIND & (1<<PD3)) {
 614:	4a 99       	sbic	0x09, 2	; 9
 616:	0f c0       	rjmp	.+30     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
 618:	4b 99       	sbic	0x09, 3	; 9
 61a:	0d c0       	rjmp	.+26     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
					WDTCSR |= (1<<WDCE) | (1<<WDE);
 61c:	e0 e6       	ldi	r30, 0x60	; 96
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	88 61       	ori	r24, 0x18	; 24
 624:	80 83       	st	Z, r24
					WDTCSR = (1<<WDIE) | (1<<WDP3) | (1<<WDP0);
 626:	81 e6       	ldi	r24, 0x61	; 97
 628:	80 83       	st	Z, r24
					SMCR |= 1<<SE;
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	83 bf       	out	0x33, r24	; 51
					SMCR |= 1<<SM1;
 630:	83 b7       	in	r24, 0x33	; 51
 632:	84 60       	ori	r24, 0x04	; 4
 634:	83 bf       	out	0x33, r24	; 51
				}
			}
		}
		asm("sleep");
 636:	88 95       	sleep
	}
 638:	1a cf       	rjmp	.-460    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>

0000063a <_exit>:
 63a:	f8 94       	cli

0000063c <__stop_program>:
 63c:	ff cf       	rjmp	.-2      	; 0x63c <__stop_program>
